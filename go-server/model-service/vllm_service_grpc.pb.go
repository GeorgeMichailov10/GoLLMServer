// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VLLMServiceClient is the client API for VLLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VLLMServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (VLLMService_QueryClient, error)
}

type vLLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVLLMServiceClient(cc grpc.ClientConnInterface) VLLMServiceClient {
	return &vLLMServiceClient{cc}
}

func (c *vLLMServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (VLLMService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &VLLMService_ServiceDesc.Streams[0], "/vllm.VLLMService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &vLLMServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VLLMService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type vLLMServiceQueryClient struct {
	grpc.ClientStream
}

func (x *vLLMServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VLLMServiceServer is the server API for VLLMService service.
// All implementations must embed UnimplementedVLLMServiceServer
// for forward compatibility
type VLLMServiceServer interface {
	Query(*QueryRequest, VLLMService_QueryServer) error
	mustEmbedUnimplementedVLLMServiceServer()
}

// UnimplementedVLLMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVLLMServiceServer struct {
}

func (UnimplementedVLLMServiceServer) Query(*QueryRequest, VLLMService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedVLLMServiceServer) mustEmbedUnimplementedVLLMServiceServer() {}

// UnsafeVLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VLLMServiceServer will
// result in compilation errors.
type UnsafeVLLMServiceServer interface {
	mustEmbedUnimplementedVLLMServiceServer()
}

func RegisterVLLMServiceServer(s grpc.ServiceRegistrar, srv VLLMServiceServer) {
	s.RegisterService(&VLLMService_ServiceDesc, srv)
}

func _VLLMService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VLLMServiceServer).Query(m, &vLLMServiceQueryServer{stream})
}

type VLLMService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type vLLMServiceQueryServer struct {
	grpc.ServerStream
}

func (x *vLLMServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VLLMService_ServiceDesc is the grpc.ServiceDesc for VLLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VLLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vllm.VLLMService",
	HandlerType: (*VLLMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _VLLMService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vllm_service.proto",
}
